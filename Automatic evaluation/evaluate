#!/usr/bin/env python
import argparse # optparse is deprecated
from itertools import islice # slicing for iterators
import spacy

nlp = spacy.load('en')
 

def word_matches(h, ref):
    return sum(1.0 for w in h if w in ref)

def simple_meteor(h, matches, ref):
    P = float(matches / len(h))
    R = float(matches / len(ref))
    if P == 0 and R == 0:
        return 0 
    else:
        return float(P*R / (0.1 * R + 0.9 * P))

def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    parser.add_argument('-i', '--input', default='data/hyp1-hyp2-ref',
            help='input file (default data/hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [sentence.strip().decode('utf-8').split() for sentence in pair.split(' ||| ')]
 
    # note: the -n option does not work in the original code
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        h1_str = ' '.join(h1)
        h2_str = ' '.join(h2)
        ref_str = ' '.join(ref)
        rset = set(ref)
        h1_match = word_matches(h1, rset)
        h2_match = word_matches(h2, rset)
        h1_meteor = simple_meteor(h1, h1_match, ref)
        h2_meteor = simple_meteor(h2, h2_match, ref)
        doc1 = nlp(h1_str)
        doc2 = nlp(h2_str)
        reference = nlp(ref_str)
        score1 = doc1.similarity(reference)
        score2 = doc2.similarity(reference)
        final1 = 0.7 * score1 + 0.3 * h1_meteor
        final2 = 0.7 * score2 + 0.3 * h2_meteor
        print(1 if final1 > final2 else # \begin{cases}
                (0 if final1 == final2
                    else -1)) # \end{cases}
 
# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
